{"version":3,"sources":["components/stepper.jsx","pages/home.jsx","App.js","serviceWorker.js","index.js","img/white-logo.png"],"names":["HorizontalLinearStepper","state","activeStep","skipped","Set","isStepOptional","step","handleNext","_this","isStepSkipped","values","delete","setState","handleBack","handleSkip","Error","add","handleReset","this","has","_this2","classes","props","steps","react_default","a","createElement","className","root","Stepper_default","map","label","index","labelProps","optional","Typography_default","variant","completed","Step_default","Object","assign","key","StepLabel_default","length","instructions","Button_default","onClick","button","getStepContent","disabled","color","React","Component","withStyles","theme","width","marginRight","spacing","unit","marginTop","marginBottom","Home","stepper","App","src","logo","alt","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9f261d73.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '90%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing.unit,\r\n    marginBottom: theme.spacing.unit,\r\n  },\r\n});\r\n\r\nfunction getSteps() {\r\n  return ['Select new or pre-order', 'Choose Gas or Desiel', 'Which Manufacturer', 'Select your Model', 'Customize your RV'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return 'Select new or pre-order...';\r\n    case 1:\r\n      return 'Choose Gas or Desiel?';\r\n    case 2:\r\n      return 'Which Manufacturer?';\r\n    case 3:\r\n      return 'Select your Model...';\r\n    default:\r\n      return 'Customize your RV'\r\n  }\r\n}\r\n\r\nclass HorizontalLinearStepper extends React.Component {\r\n  state = {\r\n    activeStep: 0,\r\n    skipped: new Set(),\r\n  };\r\n\r\n  isStepOptional = step => {\r\n    return step === 1;\r\n  };\r\n\r\n  handleNext = () => {\r\n    const { activeStep } = this.state;\r\n    let { skipped } = this.state;\r\n    if (this.isStepSkipped(activeStep)) {\r\n      skipped = new Set(skipped.values());\r\n      skipped.delete(activeStep);\r\n    }\r\n    this.setState({\r\n      activeStep: activeStep + 1,\r\n      skipped,\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState(state => ({\r\n      activeStep: state.activeStep - 1,\r\n    }));\r\n  };\r\n\r\n  handleSkip = () => {\r\n    const { activeStep } = this.state;\r\n    if (!this.isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    this.setState(state => {\r\n      const skipped = new Set(state.skipped.values());\r\n      skipped.add(activeStep);\r\n      return {\r\n        activeStep: state.activeStep + 1,\r\n        skipped,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      activeStep: 0,\r\n    });\r\n  };\r\n\r\n  isStepSkipped(step) {\r\n    return this.state.skipped.has(step);\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const steps = getSteps();\r\n    const { activeStep } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Stepper activeStep={activeStep}>\r\n          {steps.map((label, index) => {\r\n            const props = {};\r\n            const labelProps = {};\r\n            if (this.isStepOptional(index)) {\r\n              labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n            }\r\n            if (this.isStepSkipped(index)) {\r\n              props.completed = false;\r\n            }\r\n            return (\r\n              <Step key={label} {...props}>\r\n                <StepLabel {...labelProps}>{label}</StepLabel>\r\n              </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {activeStep === steps.length ? (\r\n            <div>\r\n              <Typography className={classes.instructions}>\r\n                All steps completed - you&apos;re finished\r\n              </Typography>\r\n              <Button onClick={this.handleReset} className={classes.button}>\r\n                Reset\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n              <div>\r\n                <Button\r\n                  disabled={activeStep === 0}\r\n                  onClick={this.handleBack}\r\n                  className={classes.button}\r\n                >\r\n                  Back\r\n                </Button>\r\n                {this.isStepOptional(activeStep) && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={this.handleSkip}\r\n                    className={classes.button}\r\n                  >\r\n                    Skip\r\n                  </Button>\r\n                )}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={this.handleNext}\r\n                  className={classes.button}\r\n                >\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHorizontalLinearStepper.propTypes = {\r\n  classes: PropTypes.object,\r\n};\r\n\r\nexport default withStyles(styles)(HorizontalLinearStepper);","import React, { Component } from 'react';\r\nimport Stepper from '../components/stepper';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <Stepper />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Home;","import React, { Component } from 'react';\nimport logo from './img/white-logo.png';\nimport './App.css';\nimport Home from './pages/home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/white-logo.05c454ef.png\";"],"sourceRoot":""}